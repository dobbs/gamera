{"name":"Gamera","tagline":"A framework for implementing the page object pattern and automating web page interactions","body":"# gamera\r\n\r\n[![Build Status](https://secure.travis-ci.org/gamera-team/gamera.png)](http://travis-ci.org/gamera-team/gamera)\r\n[![Dependency Status](https://gemnasium.com/gamera-team/gamera.png)](https://gemnasium.com/gamera-team/gamera)\r\n\r\ngamera lets you control and interact with web pages directly from your Ruby\r\ncode. Essentially, you can wrap any web page with a Ruby API.\r\n\r\n## Table of Contents\r\n\r\n- [Features](#features)\r\n- [What is the Page Object Pattern?](#what-is-the-page-object-pattern)\r\n- [Setup](#setup)\r\n- [Basic usage](#using-gamera)\r\n- [Using gamera with pry](#using-gamera-with-pry)\r\n- [Contributing](#contributing)\r\n\r\n## Features\r\n\r\n- a lightweight way of implementing the PageObject pattern on top of Capybara\r\n- a framework for abstracting web pages into Ruby classes\r\n- rainbows, puppies and kittens for every user (not included)\r\n\r\n## What is the Page Object Pattern?\r\n\r\n\r\nThe brilliant Martin Fowler describes the\r\n[PageObject](http://martinfowler.com/bliki/PageObject.html) pattern in detail.\r\nHere's is a list of the essential features of the pattern.\r\n\r\n  - A PageObject creates an application-level API for a web page or section of a\r\n      web page. For example, `create_user_account` instead of `fill in this\r\n      field, click on this button`\r\n  - A PageObject allows a software client to do or see anything that a human can.\r\n  - A PageObject provides an easily programmable interface that hides details of\r\n      the specific HTML controls and elements.\r\n  - Changes to the underlying web page shouldn't alter the PageObject\r\n      interface (as long as the web page still supports the same business\r\n      processes)\r\n  - The result of navigating from a PageObject (e.g. clicking on a link or\r\n      submitting a form), should be another PageObject.\r\n\r\n## Setup\r\n\r\n\r\ngamera requires Ruby 1.9.3 or later. To install, add this line to your\r\n`Gemfile` and run `bundle install`:\r\n\r\n```ruby\r\ngem 'gamera'\r\n```\r\n\r\nIf you're not using Bundler, you can install with\r\n\r\n```bash\r\ngem install 'gamera'\r\n```\r\n\r\n## Using gamera\r\n\r\n\r\ngamera has two primary classes:\r\n\r\n  1. _Page_ is a base class which you can subclass to create specific page\r\n  objects or you can create subclasses that capture additional common behavior\r\n  (for example, flash messages in a Rails app, common header or footer menus\r\n  and so forth) and extend those to create specific page objects.\r\n  2. _Builder_ is a base class for capturing business process methods that\r\n  require multiple page objects (for example, adding a new user to a new\r\n  group, which might require creating a new user, creating a group and adding\r\n  the user with each step occurring on different pages in the web app). In\r\n  practice, `Builder` subclasses are also used to create or alter data in the\r\n  system.\r\n\r\n### Example: Use gamera's _Page_ class to create a user registration page object\r\n\r\nGiven a registration page that looks like\r\n\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <h2>Register!</h2>\r\n      <form action=\"#\">\r\n        <label for='first_name'>First Name</label> <input type='text' id='first_name'>\r\n       <label for='last_name'>Last Name</label> <input type='text' id='last_name'>\r\n       <label for='email'>Email</label> <input type='text' id='email'>\r\n       <label for='password'>Email</label> <input type='text' id='password'>\r\n       <input type='button' id='save_button' name='Save' value='Save'>\r\n      </form>\r\n      </detail>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\ncreate a corresponding page object class\r\n\r\n  ```ruby\r\n  require 'gamera'\r\n\r\n  class RegistrationPage < Gamera::Page\r\n\r\n    def initialize\r\n      @url = 'http://example.com/registration'\r\n      @url_matcher = %r{/registration}\r\n    end\r\n\r\n    def register_user(first_name:, last_name:, email_address:, password:)\r\n      first_name_field.set(first_name)\r\n      last_name_field.set(last_name)\r\n      email_field.set(email)\r\n      password_field.set(password)\r\n      save\r\n    end\r\n\r\n    private\r\n\r\n    def first_name_field\r\n      find_field('First Name') # Capybara finder\r\n    end\r\n\r\n    def last_name_field\r\n      find_field('Last Name') # Capybara finder\r\n    end\r\n\r\n    def email_address_field\r\n      find_field('Email') # Capybara finder\r\n    end\r\n\r\n    def password_field\r\n      find_field('Password') # Capybara finder\r\n    end\r\n\r\n    def save\r\n      find_button('Save').click # Capybara finder\r\n    end\r\n  end\r\n\r\n  ```\r\n\r\nYou could also simplify this by using\r\n[Gamera::PageSection::Form](./doc/Gamera/PageSections/Form.html)\r\n\r\n  ```ruby\r\n  require 'gamera'\r\n\r\n  class RegistrationPage < Gamera::Page\r\n\r\n    def initialize\r\n      @url = 'http://example.com/registration/new'\r\n      @url_matcher = %r{/registration/new}\r\n\r\n      form_fields = {\r\n        first_name: 'First Name',\r\n        last_name: 'Last Name',\r\n        email: 'Email',\r\n        password: 'Password'\r\n      }\r\n      @registration_form = Gamera::PageSections::Form.new(form_fields)\r\n      def_delegators :registration_form, *registration_form.field_method_names\r\n    end\r\n\r\n    def register_user(first_name:, last_name:, email_address:, password:)\r\n      first_name_field.set(first_name)\r\n      last_name_field.set(last_name)\r\n      email_field.set(email)\r\n      password_field.set(password)\r\n      save\r\n    end\r\n\r\n    private\r\n\r\n    def save\r\n      find_button('Save').click # Capybara finder\r\n    end\r\n  end\r\n\r\n  ```\r\n\r\nIn either case, you can then call\r\n\r\n  ```ruby\r\n  rp = RegistrationPage.new\r\n  rp.visit\r\n  rp.register_user(first_name: 'Laurence',\r\n                   last_name: 'Peltier',\r\n                   email_address: 'lpeltier@example.com',\r\n                   password: 'so_secret')\r\n  ```\r\n\r\nin your code to register a new user through your web app's registration page.\r\n\r\n### Example: Extend gamera's _Page_ class to create a _RailsPage_ class\r\n\r\nFor a given web app, you may find that you want to capture other common elements\r\nin your page objects, such as, for example, flash messages in a Rails app or a\r\nnavigational node that's common to the entire site. One approach to this is to\r\nsubclass `Page`, add the common elements and then use the new subclass as the\r\nparent for the actual page object classes.\r\n\r\nFor a Rails app, a new `RailsPage` class might look something like\r\n\r\n```ruby\r\n   class RailsPage < Gamera::Page\r\n\r\n     def flash_error\r\n       flash_error_div.text\r\n     end\r\n\r\n     def flash_message\r\n       flash_notice_div.text\r\n     end\r\n\r\n     def has_flash_message?(message)\r\n       has_css?(flash_notice_css, text: message)\r\n     end\r\n\r\n     def has_flash_error?(error)\r\n       has_css?(flash_error_css, text: error)\r\n     end\r\n\r\n     def has_no_flash_error?\r\n       has_no_css?(flash_error_css)\r\n     end\r\n\r\n     def has_no_flash_message?\r\n       has_no_css?(flash_notice_css)\r\n     end\r\n\r\n     def has_submission_problems?\r\n       has_flash_error?('There were problems with your submission')\r\n     end\r\n\r\n     def fail_if_submission_problems\r\n       fail(SubmissionProblemsError, flash_error.text) if has_submission_problems?\r\n     end\r\n\r\n     private\r\n\r\n     def flash_error_css\r\n       'div.flash.error'\r\n     end\r\n\r\n     def flash_notice_css\r\n       'div.flash.notice'\r\n     end\r\n\r\n     def flash_error_div\r\n       find(flash_error_css)\r\n     end\r\n\r\n     def flash_notice_div\r\n       find(flash_notice_css)\r\n     end\r\n   end\r\n```\r\n\r\nThis could then be used as the parent class for the _RegistrationPage_ in the\r\nprevious example, adding the ability to check the flash message when the user is\r\nregistered.\r\n\r\n### Example: Creating a _Builder_ subclass to capture a multipage business\r\nprocess\r\n\r\nFor this example, let's assume we're automating a task management site that\r\nlets a manager assign task to members of her team and that we've already created\r\npage objects for some of the pages: `NewTaskPage`,\r\n`UserLoginPage`, `AssignTaskPage`. Then we might create a `AssignedTaskBuilder`\r\nlike so,\r\n\r\n```ruby\r\nrequire 'gamera'\r\nrequire 'page_objects'\r\n\r\nclass AssignedTaskBuilder < Gamera::Builder.with_options(\r\n:admin_email, :task_name, :task_due_date, :assignee_email\r\n)\r\n  def build\r\n    user_login_page = UserLoginPage.new\r\n    new_task_page = NewTaskPage.new\r\n    assign_task_page = AssignTaskPage.new\r\n\r\n    user_login_page.visit\r\n    user_login_page.login_as(admin_email)\r\n    new_task_page.visit\r\n    new_task_page.create_task(task_name, task_due_date)\r\n    assign_task_page.visit\r\n    assign_task_page.assign(task_name: task_name, to: assignee)\r\n  end\r\n\r\n  # Give back a builder with default values set (say for easy test data setup)\r\n  def assigned_task_builder\r\n    AssignedTaskBuilder.new(\r\n      admin_email: 'ann_admin@example.com',\r\n      task_name: 'That thing you do'\r\n      task_due_date: Time.now + 24.hours\r\n      assignee: 'tessa_lation@example.com')\r\n  end\r\nend\r\n```\r\n\r\nNotice that an instance of the class won't actually do anything until the\r\n`build` method is called. This lets us to defer the build until the data or\r\nprocess neeeds to happen. The builder as data factory model allows us to reuse\r\nthe builder, change the defaults or create a new builder instance with\r\ndifferent defaults.\r\n\r\n```ruby\r\nrequire 'assigned_task_builder`\r\ninclude AssignedTaskBuilder\r\n\r\nassigned_task_builder # => builder with the default options\r\nassigned_task_builder.build # => actually assign the default task\r\nanother_task_builder = assigned_task_builder.refine_with(task_name: 'That other\r\nthing you do') # => a new builder with a different task name\r\nanother_task_builder.build # => assign the new task\r\n```\r\n\r\n## Using gamera with Pry\r\n\r\n\r\nWe've created some toy web apps in Sinatra and some simple page objects on top\r\nof them to test gamera. You can play with some of the spec pages and apps in\r\npry, using the following\r\n\r\n```bash\r\ncd ~/workspace/talos/lib\r\npry -r ./pry_setup.rb\r\n```\r\n\r\nThis will add convenience methods that can be used in pry\r\n\r\nStart the single page SimpleForm web app from pry with `pry> simple_form`. Use\r\nthis:\r\n\r\n```bash\r\npry> simple_form_page.visit\r\npry> simple_form_page.fill_in_form(:text => 'Entered Text', :selection => 'C')\r\npry> simple_form_page.submit\r\n```\r\n\r\nto fill in the form on the app and submit it.\r\n\r\nTo see page object examples which handles page redirection or return page\r\ncontent, start the SimpleSite web app with\r\n\r\n```bash\r\npry> simple_site\r\n```\r\n\r\n### Example: Page Redirection via Pry\r\n\r\n```bash\r\npry> redirect_page.visit # => should redirect to home page\r\npry> redirect_page.displayed? # => false\r\npry> home_page.displayed? # => true\r\n```\r\n\r\n#### Example: Content via Pry\r\n\r\n```bash\r\npry> hit_counter_page.visit\r\npry> hit_counter_page.text =~ /You have visited this page 1 times/ # => match!\r\n```\r\n\r\n## Contributing\r\n\r\nSee this [great guide to contributing to Open Source projects from\r\nGitHub](https://guides.github.com/activities/contributing-to-open-source/#contributing)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}